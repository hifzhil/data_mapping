#include <utils.h>
#include <decrypt_data.h>
#include <interpolation.h>

#include <stdint.h>
#include <string>
#include <iostream>
#include<unistd.h>

#define SUB_SIZE 2
#define SIZE_BINS 9
bool is_first_row = true;


std::string rxData
//int a = 1;

struct ddf_table {
    uint16_t throttle;
    uint16_t rpm;
    uint16_t injection;
};
struct ddf_table ddf_table;
char buff_check[4];
int a = 1;
void print_table_map(struct ddf_table *ddf_table, int cells);
int find_table_size (std::string data, char pattern1[], char pattern2[]);
int main (int argc, char *argv[])
{
    std::cout<<"size : "<<rxData.size()<<std::endl;
    int cells_count = find_table_size(rxData, "FFFA", "FFFF");
    int cells_long = std::pow(cells_count,2);
    std::cout<<"cells count: "<<cells_long<<std::endl;
    struct ddf_table parsed[cells_long];
    for (int k = 0 ; k < 3; k++)
    {
        decrypt::data_segmentation(rxData, &ddf_table, cells_count);
        usleep(3000);
        a++;
    }
    print_table_map(&ddf_table, cells_count);
    return 0;
}

void print_table_map(struct ddf_table *ddf_table, int cells)
{
    for (int i = 0; i < pow(cells,2); i++)
    {
        std::cout<<"TPS: "<<ddf_table[i].throttle<<"\t"<<"RPM: "<<ddf_table[i].rpm<<"\t"<<"Injection: "<<ddf_table[i].injection<<std::endl;
    }                
}
int find_table_size (std::string data, char pattern1[], char pattern2[])
{
    int check_index = 0;
    bool pattern1_found_ = false;
    bool pattern2_found_ = false;
    int i_for_pattern_1_ = 0;
    int i_for_pattern_2_ = 0;
    for(int i = 0; i < data.size(); i++)
    {
        buff_check[check_index] = data[i];
        if (check_index == 3)
        {
            if (utils::compare_2_char(buff_check, pattern1) && pattern1_found_ == false)
            {
                i_for_pattern_1_ = i;
                pattern1_found_ = true;
            }
            else if (utils::compare_2_char(buff_check, pattern2) && pattern2_found_ == false)
            {                
                i_for_pattern_2_ = i;
                pattern2_found_ = true;
            }
            else
            {
                //std::cout<<buff_check<<std::endl;
            }
            check_index = 0;
        }
        else
        {
            check_index++;
        }

    }
    return ((i_for_pattern_2_ - i_for_pattern_1_)/4 - 1); 
}

